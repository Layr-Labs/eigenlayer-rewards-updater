// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"

	context "context"

	contractIPaymentCoordinator "github.com/Layr-Labs/eigenlayer-payment-updater/bindings/IPaymentCoordinator"

	eigenlayer_payment_updatercommon "github.com/Layr-Labs/eigenlayer-payment-updater/common"

	mock "github.com/stretchr/testify/mock"
)

// PaymentCalculatorDataService is an autogenerated mock type for the PaymentCalculatorDataService type
type PaymentCalculatorDataService struct {
	mock.Mock
}

// GetBlockNumberAtTimestamp provides a mock function with given fields: timestamp
func (_m *PaymentCalculatorDataService) GetBlockNumberAtTimestamp(timestamp *big.Int) (*big.Int, error) {
	ret := _m.Called(timestamp)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockNumberAtTimestamp")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*big.Int) (*big.Int, error)); ok {
		return rf(timestamp)
	}
	if rf, ok := ret.Get(0).(func(*big.Int) *big.Int); ok {
		r0 = rf(timestamp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*big.Int) error); ok {
		r1 = rf(timestamp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDistributionsAtTimestamp provides a mock function with given fields: timestamp
func (_m *PaymentCalculatorDataService) GetDistributionsAtTimestamp(timestamp *big.Int) (map[common.Address]*eigenlayer_payment_updatercommon.Distribution, error) {
	ret := _m.Called(timestamp)

	if len(ret) == 0 {
		panic("no return value specified for GetDistributionsAtTimestamp")
	}

	var r0 map[common.Address]*eigenlayer_payment_updatercommon.Distribution
	var r1 error
	if rf, ok := ret.Get(0).(func(*big.Int) (map[common.Address]*eigenlayer_payment_updatercommon.Distribution, error)); ok {
		return rf(timestamp)
	}
	if rf, ok := ret.Get(0).(func(*big.Int) map[common.Address]*eigenlayer_payment_updatercommon.Distribution); ok {
		r0 = rf(timestamp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[common.Address]*eigenlayer_payment_updatercommon.Distribution)
		}
	}

	if rf, ok := ret.Get(1).(func(*big.Int) error); ok {
		r1 = rf(timestamp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperatorSetForStrategyAtTimestamp provides a mock function with given fields: timestamp, avs, strategy
func (_m *PaymentCalculatorDataService) GetOperatorSetForStrategyAtTimestamp(timestamp *big.Int, avs common.Address, strategy common.Address) (*eigenlayer_payment_updatercommon.OperatorSet, error) {
	ret := _m.Called(timestamp, avs, strategy)

	if len(ret) == 0 {
		panic("no return value specified for GetOperatorSetForStrategyAtTimestamp")
	}

	var r0 *eigenlayer_payment_updatercommon.OperatorSet
	var r1 error
	if rf, ok := ret.Get(0).(func(*big.Int, common.Address, common.Address) (*eigenlayer_payment_updatercommon.OperatorSet, error)); ok {
		return rf(timestamp, avs, strategy)
	}
	if rf, ok := ret.Get(0).(func(*big.Int, common.Address, common.Address) *eigenlayer_payment_updatercommon.OperatorSet); ok {
		r0 = rf(timestamp, avs, strategy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eigenlayer_payment_updatercommon.OperatorSet)
		}
	}

	if rf, ok := ret.Get(1).(func(*big.Int, common.Address, common.Address) error); ok {
		r1 = rf(timestamp, avs, strategy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentsCalculatedUntilTimestamp provides a mock function with given fields: ctx
func (_m *PaymentCalculatorDataService) GetPaymentsCalculatedUntilTimestamp(ctx context.Context) (*big.Int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentsCalculatedUntilTimestamp")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*big.Int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *big.Int); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRangePaymentsWithOverlappingRange provides a mock function with given fields: startTimestamp, endTimestamp
func (_m *PaymentCalculatorDataService) GetRangePaymentsWithOverlappingRange(startTimestamp *big.Int, endTimestamp *big.Int) ([]*contractIPaymentCoordinator.IPaymentCoordinatorRangePayment, error) {
	ret := _m.Called(startTimestamp, endTimestamp)

	if len(ret) == 0 {
		panic("no return value specified for GetRangePaymentsWithOverlappingRange")
	}

	var r0 []*contractIPaymentCoordinator.IPaymentCoordinatorRangePayment
	var r1 error
	if rf, ok := ret.Get(0).(func(*big.Int, *big.Int) ([]*contractIPaymentCoordinator.IPaymentCoordinatorRangePayment, error)); ok {
		return rf(startTimestamp, endTimestamp)
	}
	if rf, ok := ret.Get(0).(func(*big.Int, *big.Int) []*contractIPaymentCoordinator.IPaymentCoordinatorRangePayment); ok {
		r0 = rf(startTimestamp, endTimestamp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*contractIPaymentCoordinator.IPaymentCoordinatorRangePayment)
		}
	}

	if rf, ok := ret.Get(1).(func(*big.Int, *big.Int) error); ok {
		r1 = rf(startTimestamp, endTimestamp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetDistributionsAtTimestamp provides a mock function with given fields: timestamp, distributions
func (_m *PaymentCalculatorDataService) SetDistributionsAtTimestamp(timestamp *big.Int, distributions map[common.Address]*eigenlayer_payment_updatercommon.Distribution) error {
	ret := _m.Called(timestamp, distributions)

	if len(ret) == 0 {
		panic("no return value specified for SetDistributionsAtTimestamp")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*big.Int, map[common.Address]*eigenlayer_payment_updatercommon.Distribution) error); ok {
		r0 = rf(timestamp, distributions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPaymentCalculatorDataService creates a new instance of PaymentCalculatorDataService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentCalculatorDataService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentCalculatorDataService {
	mock := &PaymentCalculatorDataService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
