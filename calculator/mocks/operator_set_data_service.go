// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"

	context "context"

	eigenlayer_payment_updatercommon "github.com/Layr-Labs/eigenlayer-payment-updater/common"

	mock "github.com/stretchr/testify/mock"
)

// OperatorSetDataService is an autogenerated mock type for the OperatorSetDataService type
type OperatorSetDataService struct {
	mock.Mock
}

// GetOperatorSetForStrategyAtTimestamp provides a mock function with given fields: ctx, timestamp, avs, strategy
func (_m *OperatorSetDataService) GetOperatorSetForStrategyAtTimestamp(ctx context.Context, timestamp *big.Int, avs common.Address, strategy common.Address) (*eigenlayer_payment_updatercommon.OperatorSet, error) {
	ret := _m.Called(ctx, timestamp, avs, strategy)

	if len(ret) == 0 {
		panic("no return value specified for GetOperatorSetForStrategyAtTimestamp")
	}

	var r0 *eigenlayer_payment_updatercommon.OperatorSet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *big.Int, common.Address, common.Address) (*eigenlayer_payment_updatercommon.OperatorSet, error)); ok {
		return rf(ctx, timestamp, avs, strategy)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *big.Int, common.Address, common.Address) *eigenlayer_payment_updatercommon.OperatorSet); ok {
		r0 = rf(ctx, timestamp, avs, strategy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eigenlayer_payment_updatercommon.OperatorSet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *big.Int, common.Address, common.Address) error); ok {
		r1 = rf(ctx, timestamp, avs, strategy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOperatorSetDataService creates a new instance of OperatorSetDataService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOperatorSetDataService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OperatorSetDataService {
	mock := &OperatorSetDataService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
