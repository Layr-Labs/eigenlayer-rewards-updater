// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	proofDataFetcher "github.com/Layr-Labs/eigenlayer-rewards-updater/pkg/proofDataFetcher"
	mock "github.com/stretchr/testify/mock"
)

// ProofDataFetcher is an autogenerated mock type for the ProofDataFetcher type
type ProofDataFetcher struct {
	mock.Mock
}

// FetchClaimAmountsForDate provides a mock function with given fields: ctx, date
func (_m *ProofDataFetcher) FetchClaimAmountsForDate(ctx context.Context, date string) (*proofDataFetcher.RewardProofData, error) {
	ret := _m.Called(ctx, date)

	if len(ret) == 0 {
		panic("no return value specified for FetchClaimAmountsForDate")
	}

	var r0 *proofDataFetcher.RewardProofData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*proofDataFetcher.RewardProofData, error)); ok {
		return rf(ctx, date)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *proofDataFetcher.RewardProofData); ok {
		r0 = rf(ctx, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proofDataFetcher.RewardProofData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchLatestSnapshot provides a mock function with given fields: ctx
func (_m *ProofDataFetcher) FetchLatestSnapshot(ctx context.Context) (*proofDataFetcher.Snapshot, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FetchLatestSnapshot")
	}

	var r0 *proofDataFetcher.Snapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*proofDataFetcher.Snapshot, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *proofDataFetcher.Snapshot); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proofDataFetcher.Snapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchRecentSnapshotList provides a mock function with given fields: ctx
func (_m *ProofDataFetcher) FetchRecentSnapshotList(ctx context.Context) ([]*proofDataFetcher.Snapshot, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FetchRecentSnapshotList")
	}

	var r0 []*proofDataFetcher.Snapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*proofDataFetcher.Snapshot, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*proofDataFetcher.Snapshot); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*proofDataFetcher.Snapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProofDataFetcher creates a new instance of ProofDataFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProofDataFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProofDataFetcher {
	mock := &ProofDataFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
